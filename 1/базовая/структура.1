#!1
системная
используется
  базовая/список
  базовая/управление
  racket/private/generic-methods
  с-префиксом rkt: racket/base
  с-префиксом rkt: racket/stxparam
используется-для-синтаксиса racket/private/struct-info racket/private/procedure-alias
  с-префиксом rkt: racket/base
  базовая/список
  базовая/управление
  базовая/массив
предоставлять структура

при-компиляции
  значения struct:struct-field-info make-struct-field-info \
           struct-field-info-rec? struct-field-info-ref struct-field-info-set!
    =
    rkt:make-struct-type 'struct-field-info struct:struct-info 1 0 #f
      список
        prop:struct-field-info : функция (rec)
          struct-field-info-ref rec 0

  значения struct:struct-auto-info make-struct-auto-info \
           struct-auto-info-rec? struct-auto-info-ref struct-auto-info-set!
    =
    rkt:make-struct-type 'struct-auto-info struct:struct-field-info 1 0 #f
      список
        prop:struct-auto-info : функция (rec)
          struct-auto-info-ref rec 0

  значения struct:checked-struct-info make-checked-struct-info \
           checked-struct-info-rec? checked-struct-info-ref checked-struct-info-set!
    =
    rkt:make-struct-type 'checked-struct-info struct:struct-auto-info 0 0 #f
      пустой-список
      rkt:current-inspector()
      функция (v stx)
        rkt:raise-syntax-error #f
          "ошибка синтаксиса;\n\
 идентификатор для статической информации о типе структуры не может быть использован как выражение"
          stx
      пустой-список
      функция (proc fields autos info)
        rkt:procedure? proc && rkt:procedure-arity-includes? proc 0 ?
          значения proc fields autos
          rkt:raise-argument-error 'make-struct-info
            "функция с арностью 0"
            proc

  self-ctor-transformer orig stx =
    transfer-srcloc orig stx =
      (rkt:datum->syntax orig (извлечь-из-синтаксиса orig) stx orig)
    (выбор-синтаксиса stx ()
      [(self arg ...)
       (rkt:datum->syntax stx
         (пара 
          (rkt:syntax-property
           (rkt:syntax-property (transfer-srcloc orig #'self)
                                'constructor-for
                                (rkt:syntax-local-introduce #'self))
           alias-of (rkt:syntax-local-introduce #'self))
          (извлечь-из-синтаксиса (rkt:syntax (arg ...))))
         stx
         stx)]
      [self (идентификатор? #'self)
       (rkt:syntax-property
        (rkt:syntax-property (transfer-srcloc orig #'self)
                         'constructor-for
                         (rkt:syntax-local-introduce #'self))
        alias-of (rkt:syntax-local-introduce #'self))])


  make-self-ctor-checked-struct-info =
    пусть ()
      значения struct: make- id? ref set! =
         (rkt:make-struct-type 'self-ctor-checked-struct-info struct:checked-struct-info
                                       1 0 #f
                                       (список (rkt:prop:procedure :
                                                   (функция (v stx)
                                                     (self-ctor-transformer ((ref v 0)) stx))))
                                       (rkt:current-inspector) #f '(0))
      make-

  make-struct-field-index fields =
    (функция (stx)
      (выбор-синтаксиса stx ()
        [(_ id)
         (идентификатор? #'id)
         (пусть loop ([pos 0] [fields (rkt:syntax->list fields)])
           (если
             [(пустой? fields)
              (ошибка-синтаксиса #f "no such field" stx #'name)]
             [(rkt:free-identifier=? #'id (первый fields))
              (rkt:datum->syntax #'here pos stx)]
             [иначе (loop (rkt:add1 pos) (оставшиеся fields))]))]))

  ошибка-синтаксиса = rkt:raise-syntax-error
  идентификатор? = rkt:identifier?
  извлечь-из-синтаксиса = rkt:syntax-e
  ключевое? = rkt:keyword?

определение-синтаксиса определить-структуру(full-stx)
  make-field = список
  field-id = первый
  field-default-value сп =
    первый $ оставшиеся сп
  field-auto? сп =
    первый $ оставшиеся $ оставшиеся сп
  field-mutable? сп =
    первый $ оставшиеся $ оставшиеся $ оставшиеся сп

  build-name id . parts =
    rkt:datum->syntax id
      rkt:string->symbol
        rkt:apply rkt:string-append
          отобразить
            функция (p)
              rkt:syntax? p ?
                rkt:symbol->string $ извлечь-из-синтаксиса p
                p
            parts
      id

  беда why kw where . alt =
    ошибка-синтаксиса #f
      rkt:format "в спецификации ~a ~a~a" why
        rkt:string? kw ?
          kw
          rkt:syntax-e kw
        where
      stx
      пустой? alt ? kw первый(alt)

  проверить-выражения orig-n ps what =
    пусть loop (nps оставшиеся(ps); n orig-n)
      когда-не (rkt:zero? n)
        когда-не
          пара? nps && не (ключевое? $ извлечь-из-синтаксиса $ первый nps)
          ошибка-синтаксиса
            #f
            rkt:format "ошибка синтаксиса;\n ожидается ~a ~a после ключевого слова~a"
              orig-n 
              what ||
                orig-n == 1 ? "выражение" "выражения"
              пара? nps ? ", найдено ключевое слово" ""
            stx
            первый ps
        loop
          оставшиеся nps
          rkt:sub1 n

  stx =
    выбор-синтаксиса full-stx ()
      (_ stx . _) #'stx
                  
  -- Разбирает одно поле с последовательнстью ключевых полей спецификации
  parse-field f =
    выбор-синтаксиса f ()
      id
        идентификатор? #'id
        make-field #'id #f #f #f
      (id p ...)
        идентификатор? #'id
        пусть loop
          ;
            ps $ rkt:syntax->list #'(p ...)
            def-val #f
            auto? #f
            mutable? #f
          если
            (пустой? ps)
              make-field #'id def-val auto? mutable?
            ('#:изменяемое === извлечь-из-синтаксиса (первый ps))
              когда mutable?
                беда "избыточное" (первый ps) " для поля"
              loop (оставшиеся ps) def-val auto? #t
            ('#:авто === извлечь-из-синтаксиса (первый ps))
              когда auto?
                беда "избыточное" (первый ps) " для поля"
              loop (оставшиеся ps) def-val #t mutable?
            иначе
              ошибка-синтаксиса
                #f
                ключевое? (извлечь-из-синтаксиса (первый ps)) ?
                  "неопознанная спецификация поля"
                  "ожидалось ключевое слово спецификации поля"
                stx
                (первый ps)
      иначе
        ошибка-синтаксиса
          #f
          "ошибка синтаксиса;\n\
 ожидается имя поля или в скобках имя и спецификация поля"
          stx
          f

  lookup config s =
    оставшиеся (rkt:assq s config)

  extend-config config s val =
    если
      (пустой? config)
        ошибка 'struct "внутренняя ошибка: не найден элемент: ~s" s
      ((первый $ первый config) === s)
        (s : val) : (оставшиеся config)
      иначе
        первый config : extend-config (оставшиеся config) s val

  insp-keys = "#:инспектор, #:прозрачная, или #:читаемая"

  -- Parse sequence of keyword-based struct specs
  parse-props fm p super-id =
    пусть loop
      ;
        p p
        config $ '
          (. #:super) . ложь
          (. #:inspector) . ложь
          (. #:auto-value) . ложь
          (. #:props) . ()
          (. #:mutable) . ложь
          (. #:guard) . ложь
          (. #:constructor-name) . ложь
          (. #:only-constructor?) . ложь
          (. #:reflection-name) . ложь
          (. #:name) . ложь
          (. #:only-name?) . ложь
          (. #:authentic) . ложь
          (. #:sealed) . ложь
          (. #:omit-define-values) . ложь
          (. #:omit-define-syntaxes) . ложь
          (. #:префикс) . ложь
          (. #:суффикс) . ложь
        nongen? ложь

      если
        (пустой? p) config
        ('#:над === извлечь-из-синтаксиса (первый p))
          проверить-выражения 1 p #f
          когда (lookup config '#:super)
            беда "несколько" (первый p) ""
          когда super-id
            ошибка-синтаксиса
              #f
              "ошибка синтаксиса;
 спецификация #:над запрещшена, так как надтип уже указан с именем структуры"
              stx
              первый p
          loop
            оставшиеся $ оставшиеся p
            extend-config config '#:super p[1]
            nongen?
        (извлечь-из-синтаксиса (первый p) ^в-списке===^ '(#:защита #:значение-авто))
          key = извлечь-из-синтаксиса $ первый p
          проверить-выражения 1 p #f
          когда (lookup config key)
            беда "несколько" (первый p) ""
          когда (nongen? && key === '#:защита)
            беда "нельзя использовать" (первый p) " для читаемой структуры"
          loop
            оставшиеся $ оставшиеся p
            extend-config config key p[1]
            nongen?
        ('#:свойство === извлечь-из-синтаксиса (первый p))
          проверить-выражения 2 p #f
          шаблон список*(p0 p1 p2 остальные-p) = p
          когда nongen?
            беда "cannot use" p0 " for prefab structure type"
          loop остальные-p
            extend-config config
              '#:props
              (p1 : p2) : (lookup config '#:props)
            nongen?
        ('#:методы === извлечь-из-синтаксиса (первый p))
         -- #:методы общ:foo [(метод1 x ... = e ...) ...]
          проверить-выражения 2 p "argument"
          шаблон список*(p0 gen-id gen-defs args) = p
          gen-val = идентификатор? gen-id && rkt:syntax-local-value gen-id (функция () #f)
          когда-не (generic-info? gen-val)
            беда "первый аргумент к"
              первый p
              " не является именем общего интерфейса"
              gen-id
          loop
            список* #'#:property
              квазисинтаксис/место gen-id
                rkt:generic-property #,gen-id
              квазисинтаксис/место gen-id
                rkt:generic-method-table #,gen-id #,@gen-defs
              args
            config
            nongen?
        ('#:инспектор === извлечь-из-синтаксиса (первый p))
          проверить-выражения 1 p #f
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:inspector)
            беда "несколько" insp-keys "" (первый p)
          loop args
            extend-config config '#:inspector 
              #`(check-inspector '#,fm #,p1)
            nongen?
        ('#:прозрачная === извлечь-из-синтаксиса (первый p))
          когда (lookup config '#:inspector)
            беда "несколько" insp-keys "" (первый p)
          loop
            оставшиеся p
            extend-config config '#:inspector #'#f
            nongen?
        ('#:аутентичная === извлечь-из-синтаксиса (первый p))
          когда nongen?
            беда "нельзя использовать" (первый p) " для читаемой структуры"
          когда (lookup config '#:authentic)
            беда "несколько" "#:аутентичная" "" (первый p)
          loop
            оставшиеся p
            extend-config config '#:authentic #'#t
            nongen?
        ('#:запечатана === извлечь-из-синтаксиса (первый p))
          когда nongen?
            беда "нельзя использовать" (первый p) " для читаемой структуры"
          когда (lookup config '#:sealed)
            беда "несколько" "#:запечатана" "" (первый p)
          loop
            оставшиеся p
            extend-config config '#:sealed #'#t
            nongen?
        ('#:имя-конструктора === извлечь-из-синтаксиса (первый p) ||
         '#:дополнительное-имя-конструктора === извлечь-из-синтаксиса (первый p))
          проверить-выражения 1 p "идентификатор"
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:constructor-name)
            беда "несколько" "#:имя-конструктора или #:дополнительное-имя-конструктора" ""
              первый p
          когда-не (идентификатор? p1)
            беда "нужен идентификатор после" (первый p) "" p1
          loop args
            extend-config
              extend-config config '#:constructor-name p1
              '#:only-constructor?
              '#:constructor-name === извлечь-из-синтаксиса p0
            nongen?
        ('#:имя === извлечь-из-синтаксиса (первый p) ||
         '#:дополнительное-имя === извлечь-из-синтаксиса (первый p))
          проверить-выражения 1 p "идентификатор"
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:name)
            беда "несколько" "#:имя или #:дополнительное-имя" "" (первый p)
          когда-не (идентификатор? p1)
            беда "нужен идентификатор после" (первый p) "" p1
          loop args
            extend-config
              extend-config config '#:name p1
              '#:only-name?
              '#:name === извлечь-из-синтаксиса (первый p)
            nongen?
        ('#:имя-печати === извлечь-из-синтаксиса (первый p))
          проверить-выражения 1 p "выражение"
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:reflection-name)
            беда "несколько" "#:имя-печати" "" (первый p)
          loop args
            extend-config config '#:reflection-name p1
            nongen?
        ('#:читаемая === извлечь-из-синтаксиса (первый p))
          когда (lookup config '#:inspector)
            беда "несколько" insp-keys "" (первый p)
          когда (пара? (lookup config '#:props))
            беда "нельзя использовать" (первый p) " для структры со свойствами"
          когда (lookup config '#:sealed)
            беда "нельзя использовать" (первый p) " для запечатанной структуры"
          когда (lookup config '#:guard)
            беда "нельзя использовать" (первый p) " для структуры с защитой"
          когда (lookup config '#:authentic)
            беда "нельзя использовать" (первый p) " для аутентичной структуры"
          loop
            оставшиеся p
            extend-config config '#:inspector #''prefab
            истина
        (извлечь-из-синтаксиса (первый p) ^в-списке===^
               '(#:изменяемая #:не-определять-значения #:не-определять-синтаксисы))
          key = извлечь-из-синтаксиса (первый p)
          когда (lookup config key)
            беда "избыточное" (первый p) ""
          loop
            оставшиеся p
            extend-config config key истина
            nongen?
        ('#:префикс === извлечь-из-синтаксиса (первый p))
          когда (lookup config '#:префикс)
            беда "несколько" insp-keys "" (первый p)
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:префикс)
            беда "несколько" "#:префикс" "" (первый p)
          loop args
            extend-config config '#:префикс p1
            nongen?
        ('#:суффикс === извлечь-из-синтаксиса (первый p))
          когда (lookup config '#:суффикс)
            беда "несколько" insp-keys "" (первый p)
          шаблон список*(p0 p1 args) = p
          когда (lookup config '#:суффикс)
            беда "несколько" "#:префикс" "" (первый p)
          loop args
            extend-config config '#:суффикс p1
            nongen?
        иначе
          ошибка-синтаксиса
            #f
            ключевое? (извлечь-из-синтаксиса $ первый p) ?
              "неопознанное ключевое слово спецификации структуры"
              "ожидалось ключевое слово спецификации структуры"
            stx
            первый p
  выбор-синтаксиса full-stx ()
    (_ (fm . _) id (field ...) prop ...)
     пусть значения
       $ (id super-id)               
         идентификатор? #'id ?
           значения #'id #f
           выбор-синтаксиса #'id ()
             (id super-id) 
               идентификатор? #'id && идентификатор? #'super-id
               значения #'id #'super-id
             _
               ошибка-синтаксиса 
                #f
                "ошибка синтаксиса;
 ожидается <идентификатор> для имени структуры или (<идентификатор> <идентификатор>) для имени
 и имени надтипа\n name"
                stx
                #'id
       значения super-info super-autos super-info-checked? =
          super-id ?
             пусть
               $ v (rkt:syntax-local-value super-id (функция () #f))
               struct-info? v ?
                  значения
                    extract-struct-info v
                    struct-auto-info? v ?
                      struct-auto-info-lists v
                      список пустой-список пустой-список
                    checked-struct-info-rec? v
                  ошибка-синтаксиса #f
                    rkt:format "parent struct type not defined~a"
                      v ? ";\n identifier does not name struct type information" ""
                    stx
                    super-id
             -- если надтипа нет, считаем, что проверили
             значения #f #f #t
       когда (super-info && (не $ первый super-info))
         ошибка-синтаксиса #f
            "неизвестный надтип"
            stx
            super-id
       field-stxes = rkt:syntax->list #'(field ...)
       fields = отобразить parse-field field-stxes
       dup = rkt:check-duplicate-identifier $ отобразить field-id fields
       когда dup
         ошибка-синтаксиса #f
           "дважды встречается имя поля"
           stx
           dup
       auto-count =
         пусть loop
           ;
             fields fields
             field-stxes field-stxes
             auto? #f
           если
             (пустой? fields) 0
             (field-auto? $ первый fields)
               loop оставшиеся(fields) оставшиеся(field-stxes) #t + 1
             auto?
               ошибка-синтаксиса #f
                 "автополя должны быть в конце списка"
                 stx
                 первый field-stxes
             иначе
               loop оставшиеся(fields) оставшиеся(field-stxes) #f
       значения inspector super-expr props auto-val guard ctor-name ctor-only? reflect-name \
                mutable? omit-define-values? omit-define-syntaxes? info-name name-only? \
                префикс суффикс =
         пусть
           $ config
             parse-props #'fm
               rkt:syntax->list #'(prop ...)
               super-id
           значения
             lookup config '#:inspector
             lookup config '#:super
             пусть
               ;
                 l (lookup config '#:props)
                 a? (lookup config '#:authentic)
                 s? (lookup config '#:sealed)
               пусть
                 $ l
                   a? ?
                     (#'prop:authentic : #'#t) : l
                     l
                 s? ?
                    (#'prop:sealed : #'#t) : l
                    l
             lookup config '#:auto-value
             lookup config '#:guard
             lookup config '#:constructor-name
             lookup config '#:only-constructor?
             lookup config '#:reflection-name
             lookup config '#:mutable
             lookup config '#:omit-define-values
             lookup config '#:omit-define-syntaxes
             lookup config '#:name
             lookup config '#:only-name?
             lookup config '#:префикс
             lookup config '#:суффикс
       self-ctor? =
         ctor-name && (не name-only? && rkt:bound-identifier=? id ctor-name
                       || info-name && rkt:bound-identifier=? info-name ctor-name)
       name-as-ctor? = self-ctor? || не ctor-only?
       когда mutable?
         для-каждого
           функция (f f-stx)
             когда (field-mutable? f)
               ошибка-синтаксиса #f
                 "избыточная спецификация #:изменяемое в поле"
                 stx
                 f-stx
           fields field-stxes
       
       struct: = build-name id "структура:" id
       make- = ctor-name ?
         self-ctor? ?
           omit-define-syntaxes? ?
             ctor-name
             первый $ rkt:generate-temporaries $ список id
           ctor-name
         build-name id "создать-" id
       id? = build-name id id "?"
       sels =
         отобразить
           функция (f)
             префикс || суффикс ?
               build-name id
                 префикс || ""
                 field-id f
                 суффикс || ""
               build-name id
                 id
                 "-"
                 field-id f
           fields
       (super-struct: = (? super-info
                          (|| (первый super-info)
                              (ошибка-синтаксиса
                               #f
                               "no structure type descriptor available for supertype"
                               stx
                               super-id))
                          (&& super-expr
                               #`(пусть ([the-super #,super-expr])
                                   (? (struct-type? the-super)
                                       the-super
                                       (check-struct-type 'fm the-super))))))
       (prune  = (функция (stx)
                (rkt:syntax-protect
                 (rkt:identifier-prune-lexical-context stx
                    (список (извлечь-из-синтаксиса stx) '#%top)))))
       (reflect-name-expr = (? reflect-name
                              (выбор-синтаксиса reflect-name (quote цитата)
                                [(quote id)
                                 (идентификатор? #'id)
                                 reflect-name]
                                [(цитата id)
                                 (идентификатор? #'id)
                                 reflect-name]
                                [else
                                 (quasisyntax (check-reflection-name 'fm #,reflect-name))])
                              (quasisyntax '#,id)))

       (= struct-name-size (rkt:string-length (rkt:symbol->string (извлечь-из-синтаксиса id))))
       (= struct-name/locally-introduced (rkt:syntax-local-introduce id))
       (= struct-name-to-predicate-directive
         (массив (rkt:syntax-local-introduce id?)
                 0
                 struct-name-size
                 struct-name/locally-introduced
                 0
                 struct-name-size))
                   
       (= struct-name-to-old-style-maker-directive
         (? ctor-name
             #f
             (массив (rkt:syntax-local-introduce make-)
                     5
                     struct-name-size
                     struct-name/locally-introduced
                     0
                     struct-name-size)))
                   
       (= (struct-name-to-selector/mutator-directive id-stx selector?)
         (массив (rkt:syntax-local-introduce id-stx)
                 (? selector? 0 4)
                 struct-name-size
                 struct-name/locally-introduced
                 0
                 struct-name-size))
       ((field-to-selector/mutator-directive field id-stx selector?) =
         (fld-size = rkt:string-length $ rkt:symbol->string $ извлечь-из-синтаксиса $ field-id field)
         (массив (rkt:syntax-local-introduce id-stx)
                 (+ (? selector? 1 5) struct-name-size)
                 fld-size
                 (rkt:syntax-local-introduce (field-id field))
                 0
                 fld-size))
                  
       (= (значения sets field-to-mutator-directives sets-auto-count)
         (пусть loop ([fields fields])
           (если
             [(пустой? fields) (значения пустой-список пустой-список 0)]
             [(не (|| mutable? (field-mutable? (первый fields))))
              (loop (оставшиеся fields))]
             [иначе
              (= (значения other-sets other-directives count)
                (loop (оставшиеся fields)))
              (count* = (? (field-auto? (первый fields))
                                 (+ count 1)
                                 count))
              (this-set =
                (build-name id
                            "set-"
                            id
                            "-"
                            (field-id (первый fields))
                            "!"))
              (значения (this-set : other-sets)
                      ((field-to-selector/mutator-directive (первый fields)
                                                                 this-set
                                                                 #f) :
                            other-directives)
                      count*)])))
                   
       (= all-directives
         (++ 
          (список struct-name-to-predicate-directive)
          (? struct-name-to-old-style-maker-directive
              (список struct-name-to-old-style-maker-directive)
              '())
          field-to-mutator-directives
          (отобразить (λ (field sel)
                 (field-to-selector/mutator-directive field sel #t))
               fields
               sels)
          (отобразить (λ (sel)
                 (struct-name-to-selector/mutator-directive
                  sel
                  #t))
               sels)
          (отобразить (λ (mut)
                 (struct-name-to-selector/mutator-directive
                  mut
                  #f))
               sets)))

       (run-time-defns =
        (функция ()
          (квазисинтаксис/место stx
            ((значения #,struct: #,make- #,id? #,@sels #,@sets) =
              (пусть значения ([(struct: make- id? -ref -set!)
                            (rkt:syntax-parameterize ([rkt:struct-field-index
                                                   (make-struct-field-index (rkt:quote-syntax #,(отобразить field-id fields)))])
                              (rkt:make-struct-type #,reflect-name-expr
                                                #,super-struct:
                                                #,(- (длина fields) auto-count)
                                                #,auto-count
                                                #,auto-val
                                                #,(? (пустой? props)
                                                      #'пустой-список
                                                      #`(список #,@(отобразить (функция (p)
                                                                        #`(пара #,(первый p) #,(оставшиеся p)))
                                                                      props)))
                                                #,(|| inspector
                                                      #`(rkt:current-inspector))
                                                #f
                                                '#,(пусть loop ([i 0]
                                                              [fields fields])
                                                     (если
                                                       [(пустой? fields) пустой-список]
                                                       [(field-auto? (первый fields)) пустой-список]
                                                       [(не (|| mutable? (field-mutable? (первый fields))))
                                                        (пара i (loop (rkt:add1 i) (оставшиеся fields)))]
                                                       [иначе (loop (rkt:add1 i) (оставшиеся fields))]))
                                                #,guard
                                                '#,(? ctor-only? ctor-name id)))])
                (значения struct: make- id?
                        #,@(пусть loop ([i 0][fields fields])
                             (? (пустой? fields)
                                 пустой-список
                                 (пара #`(rkt:make-struct-field-accessor -ref #,i '#,(field-id (первый fields)))
                                       (loop (rkt:add1 i) (оставшиеся fields)))))
                        #,@(пусть loop ([i 0][fields fields])
                             (? (пустой? fields)
                                 пустой-список
                                 (? (не (|| mutable? (field-mutable? (первый fields))))
                                     (loop (rkt:add1 i) (оставшиеся fields))
                                     (пара #`(rkt:make-struct-field-mutator -set! #,i '#,(field-id (первый fields)))
                                           (loop (rkt:add1 i) (оставшиеся fields))))))))))))
       (compile-time-defns =
        (функция (body-only?)
          (protect = (λ (sel)
                            (&& sel
                                 (? (извлечь-из-синтаксиса sel)
                                     #`(rkt:quote-syntax #,(prune sel))
                                     sel))))
          (include-autos? = (|| super-info-checked?
                              name-as-ctor?
                              (&& super-autos
                                   (|| (пара? (первый super-autos))
                                       (пара? (первый $ оставшиеся super-autos))))
                              (rkt:positive? auto-count)))
          (mk-info = (? super-info-checked?
                       (? name-as-ctor?
                           #'make-self-ctor-checked-struct-info
                           #'make-checked-struct-info)
                       (? name-as-ctor?
                           #'make-self-ctor-struct-info
                           (? include-autos?
                               #'make-struct-auto-info
                               #'make-struct-field-info))))
          (define-syntax-body =
            #`(#,mk-info
               (λ ()
                 (список
                  (rkt:quote-syntax #,(prune struct:))
                  (rkt:quote-syntax #,(prune (? (&& ctor-name self-ctor?)
                                             ctor-name
                                             make-)))
                  (rkt:quote-syntax #,(prune id?))
                  (список
                   #,@(отобразить protect (развернуть sels))
                   #,@(? super-info
                          (отобразить protect super-info[3])
                          (? super-expr
                              '(#f)
                              пустой-список)))
                  (список
                   #,@(rkt:reverse
                       (пусть loop ([fields fields][sets sets])
                         (если
                           [(пустой? fields) пустой-список]
                           [(не (|| mutable? (field-mutable? (первый fields))))
                            (пара #f (loop (оставшиеся fields) sets))]
                           [иначе
                            (пара (protect (первый sets))
                                  (loop (оставшиеся fields) (оставшиеся sets)))])))
                   #,@(? super-info
                          (отобразить protect super-info[4])
                          (? super-expr
                              '(#f)
                              пустой-список)))
                  #,(? super-id
                        (protect super-id)
                        (? super-expr
                            #f
                            #t))))
               '#,(отобразить field-id (развернуть fields))
               #,@(? include-autos?
                      (список #`(список (список #,@(отобразить protect 
                                                  (хвост-списка sels (- (длина sels) auto-count)))
                                          #,@(? super-autos
                                                 (отобразить protect (первый super-autos))
                                                 пустой-список))
                                    (список #,@(отобразить protect
                                                  (хвост-списка sets (rkt:max 0 (- (длина sets) sets-auto-count))))
                                          #,@(? super-autos
                                                 (отобразить protect (первый (оставшиеся super-autos)))
                                                 пустой-список))))
                      пустой-список)
               #,@(? name-as-ctor?
                      (список #`(функция () (rkt:quote-syntax #,make-)))
                      пустой-список)))
        (? body-only?
           define-syntax-body
           (квазисинтаксис/место stx
                                 (rkt:define-syntaxes (#,(? name-only? info-name id))
                                   #,define-syntax-body)))))
       (extra-compile-time-defs =
        (функция ()
          (если
            [(&& info-name (не name-only?))
             (когда omit-define-syntaxes?
               (ошибка-синтаксиса #f "#:extra-name cannot be combined with #:omit-define-syntaxes" stx))
             -- reuse existing value
             (список #`(rkt:define-syntaxes (#,info-name) (rkt:syntax-local-value #'#,id)))]
            [иначе пустой-список])))

       (result =
        (если
          [(&& (не omit-define-values?) (не omit-define-syntaxes?))
           (? (=== (rkt:syntax-local-context) 'top-level)
               -- Top level: declare names to be bound by `define',
               -- but put run-time expressions after `define-syntaxes'
               -- to they can refer to bindings that are bound by
               -- `define-syntaxes' (e.g. use of the constructor name
               -- in the body of a property value that is a procedure)
               #`(блок 
                   (rkt:define-syntaxes (#,struct: #,make- #,id? #,@sels #,@sets) (значения))
                   #,(compile-time-defns #f)
                   #,@(extra-compile-time-defs)
                   #,(run-time-defns))
               -- Other contexts: order should't matter:
               #`(блок 
                   #,(run-time-defns) 
                   #,(compile-time-defns #f)
                   #,@(extra-compile-time-defs)))]
          [omit-define-syntaxes?
           #`(блок
               #,(run-time-defns)
               #,@(extra-compile-time-defs))]
          [omit-define-values?
           #`(блок
               #,(compile-time-defns #f)
               #,@(extra-compile-time-defs))]
          [иначе #'(блок)]))

       (rkt:syntax-protect
        (rkt:syntax-property
         (? super-id
             (rkt:syntax-property result 
                              'disappeared-use 
                              (rkt:syntax-local-introduce super-id))
             result)
         'sub-range-binders
         all-directives))
    (_ _ id . _)
     (не (|| (идентификатор? #'id)
             (&& (rkt:syntax->list #'id)
                 (=== 2 (длина (rkt:syntax->list #'id)))
                 (rkt:andmap идентификатор? (rkt:syntax->list #'id)))))
     (ошибка-синтаксиса
      #f
      "bad syntax;\n expected <id> for structure-type name or (<id> <id>) for name and supertype\n name"
      stx
      #'id)
    (_ _ id (field ...) . _)
     (блок
       (для-каждого parse-field (rkt:syntax->list #'(field ...)))
       (ошибка-синтаксиса
        #f
        "bad syntax after field sequence"
        stx))
    (_ _ id fields . _)
     (ошибка-синтаксиса
      #f
      "bad syntax;\n expected a parenthesized sequence of field descriptions"
      stx
      #'fields)
    (_ _ id)
     (ошибка-синтаксиса
      #f
      "bad syntax;\n missing fields"
      stx)
    _
     (ошибка-синтаксиса
      #f
      "bad syntax"
      stx)


(определение-синтаксиса (структура/для-синтаксиса stx)
    (= (config-has-name? config)
      (если
        [(rkt:syntax? config) (config-has-name? (rkt:syntax-e config))]
        [(rkt:pair? config) (rkt:or (rkt:eq? (rkt:syntax-e (rkt:car config)) '#:constructor-name)
                            (rkt:eq? (rkt:syntax-e (rkt:car config)) '#:extra-constructor-name)
                            (config-has-name? (rkt:cdr config)))]
        [иначе #f]))
    (выбор-синтаксиса stx ()
      [(_ orig id super-id (fields ...) config ...)
       (&& (rkt:identifier? #'id)
            (rkt:identifier? #'super-id))
       (? (rkt:not (config-has-name? #'(config ...)))
           (rkt:syntax/loc stx 
             (определить-структуру orig 
               (id super-id)
               (fields ...)
               #:имя-конструктора id
               config ...))
           (rkt:syntax/loc stx 
             (определить-структуру orig 
               (id super-id)
               (fields ...) 
               config ...)))]
      [(_ orig id (fields ...) config ...)
       (rkt:identifier? #'id)
       (rkt:if (rkt:not (config-has-name? #'(config ...)))
           (rkt:syntax/loc stx 
             (определить-структуру orig 
               id
               (fields ...) 
               #:имя-конструктора id 
               config ...))
           (rkt:syntax/loc stx 
             (определить-структуру orig 
               id
               (fields ...) 
               config ...)))]
      [(_ orig id . rest)
       (rkt:identifier? #'id)
       (rkt:syntax/loc stx
         (определить-структуру orig id . rest))]
      [(_ thing . _) (rkt:raise-syntax-error #f
                                         "expected an identifier for the structure type name"
                                         stx
                                         #'thing)]))

(определение-синтаксиса (структура stx)
  (выбор-синтаксиса stx ()
    [(_ name . rest)
     (rkt:with-syntax ([orig stx])
       #'(структура/для-синтаксиса orig name . rest))]))

пусто