#!1
системная
используется
  с-префиксом rkt: racket/base
  с-префиксом mt: racket/match
используется-для-синтаксиса
  базовая/синтаксис
  базовая/функция

предоставлять список список* список? пара пара? пустой? пустой-список первый оставшиеся \
  подсписок подсписок=== отобразить отобразить/и отобразить/или отобрать для-каждого длина \
  развернуть хвост-списка элемент-списка добавить свернуть ассоциация :

mt:define-match-expander список
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(list образец ...)
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(rkt:list образец ...)
      _ #'(rkt:procedure-rename rkt:list 'список)

mt:define-match-expander список*
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(list* образец ...)
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(rkt:list* образец ...)
      _ #'(rkt:procedure-rename rkt:list* 'список*)

mt:define-match-expander пара
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(cons образец ...)
  функция (выражение)
    выбор-синтаксиса выражение ()
      (_ образец ...)
         #'(rkt:cons образец ...)
      _ #'(rkt:procedure-rename rkt:cons 'пара)

а : б =
  пара а б

список? объект =
  rkt:list? объект

пара? объект =
  rkt:pair? объект

пустой? список =
  rkt:null? список

первый список =
  rkt:car список

оставшиеся список =
  rkt:cdr список

пустой-список = rkt:null

подсписок значение список =
  rkt:member значение список

подсписок=== значение список =
  rkt:memv значение список

отобразить обработчик . списки =
  rkt:apply rkt:map обработчик списки

отобразить/и обработчик . списки =
  rkt:apply rkt:andmap обработчик списки

отобразить/или обработчик . списки =
  rkt:apply rkt:ormap обработчик списки

отобрать обработчик список =
  rkt:filter обработчик список

свернуть обработчик начальное . списки =
  rkt:apply rkt:foldl обработчик начальное списки

для-каждого обработчик . списки =
  rkt:apply rkt:for-each обработчик списки

длина список =
  rkt:length список

развернуть список =
  rkt:reverse список

хвост-списка список количество =
  rkt:list-tail список количество

элемент-списка список позиция =
  rkt:list-ref список позиция

добавить . списки =
  rkt:apply rkt:append списки

ассоциация список ключ (равенство rkt:equal?) =
  rkt:assoc список ключ равенство
