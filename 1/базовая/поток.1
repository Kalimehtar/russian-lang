#!1
системная
используется
  с-префиксом rkt: racket/base
  базовая/управление
  базовая/функция
  базовая/исключение

предоставлять поток? поток текущий-поток послать-в-поток получить-для-потока во-вложенном-потоке \
  попытаться-получить-для-потока прервать-поток не-дольше спать ждать-события событие-получения

поток? объект =
  rkt:thread? объект

поток функция =
  rkt:thread функция

во-вложенном-потоке функция =
  rkt:call-in-nested-thread функция

текущий-поток() = rkt:current-thread()

послать-в-поток поток объект =
  rkt:thread-send поток объект

получить-для-потока() = rkt:thread-receive()

попытаться-получить-для-потока() = rkt:thread-try-receive()

событие-получения() = rkt:thread-receive-evt()

прервать-поток поток =
  rkt:kill-thread поток

ждать-события время событие =
  rkt:sync/timeout время событие

не-дольше время действие #:при-ошибке при-ошибке(ложь) =
  обработчик-ошибок =
    функция? при-ошибке ?
      при-ошибке
      функция _ при-ошибке

  во-вложенном-потоке
    функция ()
      ведущий = текущий-поток()
      ведомый =
        поток $ функция ()
          послать-в-поток ведущий
            попытка обработчик-ошибок
              действие()
      если
        (ждать-события время ведомый)
          получить-для-потока()
        иначе
          прервать-поток ведомый
          обработчик-ошибок ложь

спать секунд =
  rkt:sleep секунд
