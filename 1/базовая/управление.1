#!1
системная
используется
  с-префиксом rkt: racket
  базовая/синтаксис
  1/syn
используется-для-синтаксиса
  базовая/список
  базовая/синтаксис
  с-префиксом rkt: racket
предоставлять если цикл цикл/первый цикл/список пусть выбор когда когда-не в-списке параметризуя ? 

определение-синтаксиса (если stx)
  выбор-синтаксиса stx (=> иначе)
    (_ (=> условие функция) остаток ...)
      #'(rkt:let ([t условие])
          (rkt:if t (функция t) (если остаток ...)))
    (_ (иначе действия ...) остаток ...)
      #'(rkt:let () действия ...)
    (_ (условие действия ...) остаток ...)
      #'(rkt:if условие
           (rkt:let () действия ...)
           (если остаток ...))
    (_) #'(rkt:void)

определение-синтаксиса (выбор stx)
  выбор-синтаксиса stx (иначе)
    (_ знач (иначе действия ...) остаток ...)
      #'(rkt:let () знач действия ...)
    (_ v ((k ...) e1 e2 ...) ... (иначе x1 x2 ...))
      #'(rkt:case v [(k ...) e1 e2 ...] ... (else x1 x2 ...))
    (_ v ((k ...) e1 e2 ...) ...)
      #'(rkt:case v [(k ...) e1 e2 ...] ...)

при-компиляции
  замена-ключевого-слова stx =
    rkt:case (rkt:syntax-e stx)
      ((. #:когда)) '#:when
      ((. #:когда-не)) '#:unless
      ((. #:прервать))  '#:break
      ((. #:последняя)) '#:final
      rkt:else #f

  преобразовать-слово-цикла(stx) =
    l = rkt:syntax-e stx
    rkt:cond
      (rkt:list? l)
        замена = замена-ключевого-слова (первый l)
        rkt:if замена
          rkt:datum->syntax stx (пара (rkt:datum->syntax (первый l) замена) (оставшиеся l))
          stx
      rkt:else
        замена = замена-ключевого-слова stx
        rkt:if замена
         rkt:datum->syntax stx замена
         stx

  преобразовать-слова-цикла синтаксис =
    l = rkt:syntax-e синтаксис
    rkt:cond
      (rkt:list? l)
        rkt:datum->syntax синтаксис $ rkt:map преобразовать-слово-цикла l
      rkt:else синтаксис

определение-синтаксиса (определение-синтаксиса-цикла форма)
  выбор-синтаксиса форма ()
    (_ русский английский)
      #'(определение-синтаксиса (русский форма)
          (выбор-синтаксиса форма (для)
            [(_ (для (А Б) . В) . Г)
             #`(английский ((А Б) . #,(преобразовать-слова-цикла #'В)) . Г)]
            [(_ (А Б) . Г) #'(английский ((А Б)) . Г)]
            [(_ . А) #'(английский . А)]))

определение-синтаксиса-цикла цикл rkt:for
определение-синтаксиса-цикла цикл/первый rkt:for/first
определение-синтаксиса-цикла цикл/список rkt:for/list

определение-синтаксиса (пусть форма)
  выбор-синтаксиса форма (значения)
    (_ ((А Б) . В) . Г) #'(rkt:let ((А Б) . В) . Г)
    (_ (А Б) . Г) #'(rkt:let ((А Б)) . Г)
    (_ значения ((А Б) . В) . Г) #'(rkt:let-values ((А Б) . В) . Г)
    (_ ИМЯ ((А Б) . В) . Г) #'(rkt:let ИМЯ ((А Б) . В) . Г)
    (_ ИМЯ (А Б) . Г) #'(rkt:let ИМЯ ((А Б)) . Г)
    (_ . А) #'(rkt:let . А)

определение-синтаксиса ?(выражение)
  выбор-синтаксиса выражение ()
    (? условие если-да если-нет)
      #'(rkt:if условие если-да если-нет)

синоним rkt:when когда
синоним rkt:unless когда-не
синоним rkt:in-list в-списке
синоним rkt:parameterize параметризуя
