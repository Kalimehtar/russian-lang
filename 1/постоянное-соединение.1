#!1
используется
  с-префиксом надёжное: надёжное-соединение

предоставлять соединить ждать-соединения принять-соединение отправить

интервал-отправки-пакетов = 10
задержка-переподключения = 5
время-ожидания-пакета = 30

-- виды сообщений
-- (число . данные) = сообщение
-- () = проверка связи, отправляется, чтобы убедиться, что соединение не упало
-- число = подтверждение приёма

-- сервер отправляет сообщения с интервалом не меньше интервал-отправки-пакетов
-- если от сервера в течение время-ожидания-пакета нет пакетов, считаем, что с соединением
--   что-то случилось (например, блокировка сетевым фильтром) и переподключаемся

подтверждение = новый-символ()
получено-подтверждение = новый-символ()
пора-что-то-отправить = новый-символ()
время-вышло = новый-символ()

соединить имя-сервера номер-порта
  #:при-подключении при-подключении $ функция (причина-отключения поток-записи) пусто
  #:при-получении при-получении $ функция (объект) пусто
  #:при-изменении-состояния при-изменении-состояния $ функция (состояние) пусто
  =
  ввод = ложь
  ввод~() = ввод
  вывод = ложь
  завершить = ложь
  завершить~() = завершить
  всегда-истина() = истина
  причина-отключения = ложь
  очередь-отправки = новое-соответствие===()
  номер-отправленного = 0
  номер-отправленного!() =
    номер-отправленного := номер-отправленного + 1
    номер-отправленного
  отключилось причина задержка =
    ввод := ложь
    вывод := ложь
    причина-отключения := причина
    при-изменении-состояния(причина)
    спать задержка
    если не завершить тогда
      послать-в-поток поток-соединения истина
  -- соединение
  поток-соединения = бесконечный-поток завершить~ всегда-истина
    функция ()
      получить-для-потока()
      попытка
        функция (ошибка)
          отключилось ошибка задержка-переподключения
        значения ввод вывод := надёжное:соединить имя-сервера номер-порта
        при-подключении причина-отключения поток-записи
    функция ()
      -- поток чтения может превысить ожидание и отправить переподключение
      спать время-ожидания-пакета
  -- чтение
  бесконечный-поток завершить~ ввод~
    функция ()
      прочитано =
        не-дольше время-ожидания-пакета
          #:при-ошибке время-вышло
          функция ()
            прочитать ввод
      если
        (прочитано === время-вышло) 
          отключилось 'время-вышло 0
        конец-файла?(прочитано)
          отключилось 'обрыв-связи задержка-переподключения
        иначе
          обработать-прочитанное! прочитано поток-записи при-получении
    функция ()
      закрыть-порт-ввода ввод
      ввод := ложь
  -- запись
  поток-записи = бесконечный-поток завершить~ ввод~
    функция ()
      данные = данные-записи!()
      вывод* = вывод -- чтобы не менялось до конца функции      
      если вывод* тогда
        если данные === пора-что-то-отправить тогда
          отобразить-соответствие очередь-отправки $ функция (ключ значение)
            написать/перенос (пара ключ значение) вывод*
          иначе
          отправить-данные! данные вывод* очередь-отправки номер-отправленного!
        немедленно-записать вывод*
    функция ()
      закрыть-порт-вывода вывод
      вывод := ложь
  послать-в-поток поток-соединения истина
  значения поток-записи $ функция ()
    завершить := истина
  
ждать-соединения порт =
  надёжное:ждать-соединения порт

принять-соединение ожидание при-получении =
  завершить = ложь
  завершить~() = завершить
  очередь-отправки = новое-соответствие===()
  номер-отправленного = 0
  номер-отправленного!() =
    номер-отправленного := номер-отправленного + 1
    номер-отправленного
  значения ввод вывод = надёжное:принять-соединение ожидание
  ввод~() = ввод
  -- чтение
  поток-записи = бесконечный-поток завершить~ ввод~
    функция ()
      данные = данные-записи!()
      вывод* = вывод -- чтобы не менялось до конца функции
      если вывод* тогда
        если данные === пора-что-то-отправить тогда
          если пустой? ключи-соответствия(очередь-отправки) тогда
            написать/перенос '() вывод*
            иначе
            отобразить-соответствие очередь-отправки $ функция (ключ значение)
              написать/перенос (пара ключ значение) вывод*
          иначе
          отправить-данные! данные вывод* очередь-отправки номер-отправленного!
        немедленно-записать вывод*
    функция ()
      закрыть-порт-вывода вывод
      вывод := ложь
  бесконечный-поток завершить~ ввод~
    функция ()
      прочитано = прочитать(ввод)
      если конец-файла? прочитано тогда
        завершить := истина
        иначе
        обработать-прочитанное! прочитано поток-записи $ функция (объект)
          при-получении объект поток-записи
    функция ()
      закрыть-порт-ввода ввод
      ввод := ложь
  значения поток-записи $ функция ()
    завершить := истина

отправить соединение данные =
  послать-в-поток соединение данные

-- утилиты

данные-записи!() =
  ждать-события интервал-отправки-пакетов событие-получения()
  попытаться-получить-для-потока() || пора-что-то-отправить

это-подтверждение данные =
  если данные && первый данные === подтверждение тогда
    оставшиеся данные
    иначе
    ложь

это-получено-подтверждение данные =
  если данные && первый данные === получено-подтверждение тогда
    оставшиеся данные
    иначе
    ложь

обработать-прочитанное! прочитано поток-записи при-получении =
  если
    (число? прочитано)
      послать-в-поток поток-записи
        пара получено-подтверждение прочитано
    (не пустой?(прочитано))
      послать-в-поток поток-записи
        пара подтверждение
          первый прочитано
      при-получении оставшиеся(прочитано)

отправить-данные! данные вывод очередь-отправки номер-отправленного! =
  если
    (это-подтверждение данные) => функция (данные*)
      написать/перенос данные* вывод
    (это-получено-подтверждение данные) => функция (данные*)
      удалить-из-соответствия! очередь-отправки данные*
    иначе     
      номер-отправленного = номер-отправленного!()
      очередь-отправки[номер-отправленного] = данные
      написать/перенос (пара номер-отправленного данные) вывод

бесконечный-поток завершить? ввод действие
  действие-окончания
    функция () пусто
  =
  поток $ функция ()
    пусть бесконечно ()
      ввод() ?
        действие()
        спать 1
      если не завершить?() тогда бесконечно() иначе действие-окончания()
